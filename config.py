
import telebot
from telebot import types
from presetBase import admin_list


#bot = telebot.TeleBot(TOKEN)

callback_capcha = ['üë•', 'üëæ', 'üê∞', 'üçÄ', 'üçå']
flag_capcha = False


def DotMenu(message):
    markup = types.ReplyKeyboardRemove()
    return markup

def MainMenu(message):
    markup = types.InlineKeyboardMarkup()

    markup.row_width = 2

    #btn0 = types.InlineKeyboardButton("üìÇ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my nft")
    btn1 = types.InlineKeyboardButton('‚úà –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data="get_order")
    btn2 = types.InlineKeyboardButton('üìÇ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data="change_data")

    # btn2 = types.InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="refer programm")

    # log_inst = types.InlineKeyboardButton(text="üì± Instagram", url='https://instagram.com/ton_elephants')
    log_tg = types.InlineKeyboardButton(text="‚úà Telegram", url='https://t.me/kicksboxlog')
    log_chat = types.InlineKeyboardButton(text='üó£ –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤', url='https://t.me/+DdJEiUvR0Vg2NDdi')

    chat_id = message.chat.id

    markup.add(btn1, btn2, log_tg, log_chat)
   

    return markup

def ChangeData(message):
    markup = types.InlineKeyboardMarkup()

    markup.row_width = 2

    btn1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")
    back_Menu = types.InlineKeyboardButton(text="‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")

    markup.add(btn1, back_Menu)

    return markup

def show_url_sub():
    """–í—ã–≤–æ–¥ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    
    markup = types.InlineKeyboardMarkup()

    markup.row_width = 3

    log_tg = types.InlineKeyboardButton(text="‚úà Telegram", url='https://t.me/kicksboxlog')
    log_chat = types.InlineKeyboardButton(text='üó£ –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤', url='https://t.me/+DdJEiUvR0Vg2NDdi')

    back_Menu = types.InlineKeyboardButton(text="‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")

    


    markup.add(log_tg, log_chat, back_Menu)

    


    return markup

def MarkupBackMenu():
    markup = types.InlineKeyboardMarkup()

    back_Menu = types.InlineKeyboardButton(text="‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")

    markup.add(back_Menu)
    
    return markup

def ParserOrder(user_input):
    try:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç–æ–π
        parts = [part.strip() for part in user_input.split(",")]
        
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è 4 —ç–ª–µ–º–µ–Ω—Ç–∞.")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        clothing_type = parts[0]  # –¢–∏–ø –æ–¥–µ–∂–¥—ã
        size = (parts[1])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price_in_yuan = float(parts[2])  # –¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö
        link = parts[3]  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä

        return {
            "clothing_type": clothing_type,
            "size": size,
            "price_in_yuan": price_in_yuan,
            "link": link
        }

    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

