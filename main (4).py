import telebot
from telebot import types
import bd
from config import *
from random import randint
import Course as CB

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "6339184612:AAFZ8dUTqpvXLiJSWF02ZHkZoioJPQsVr2M"
bot = telebot.TeleBot(TOKEN)



def ChekUser(message):

    markup = types.InlineKeyboardMarkup()

    capcha_one = types.InlineKeyboardButton(text=callback_capcha[0], callback_data=callback_capcha[0])
    capcha_two = types.InlineKeyboardButton(text=callback_capcha[1], callback_data=callback_capcha[1])
    capcha_tree = types.InlineKeyboardButton(text=callback_capcha[2], callback_data=callback_capcha[2])
    capcha_four = types.InlineKeyboardButton(text=callback_capcha[3], callback_data=callback_capcha[3])
    capcha_five = types.InlineKeyboardButton(text=callback_capcha[4], callback_data=callback_capcha[4])

    markup.add(capcha_one, capcha_two, capcha_tree, capcha_four, capcha_five)
    
    markup.row_width = 2

    capcha_id = randint(0, 4)

    capcha = callback_capcha[capcha_id]

    bd.SetCapcha(message.chat.id, capcha_id)

    print("[Set Capcha]", capcha_id, capcha)

    bot.send_message(message.chat.id, text="–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                                            "–î–ª—è —ç—Ç–æ–≥–æ, –Ω–∞–π–¥–∏—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–∑–æ–±—Ä–∞–µ–Ω–∏—è\n"
                                            f"{capcha}",
                    reply_markup=markup
    )

def BuyOrder(message):
    markup = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton("üí¥ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", callback_data="chek_coast")
    btn2 = types.InlineKeyboardButton("üì® –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")
    back = types.InlineKeyboardButton("‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")

    markup.add(btn1, btn2, back)

    bot.send_message(message.chat.id, "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –æ–¥–µ–∂–¥—É", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "login")
def handle_login(call):
    bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è, –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã, –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
@bot.message_handler(func=lambda message: True)
def handle_registration(message):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "–ò–º—è, –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã, –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏")
    if message.text == "/start":
        ChekUser(message)
    elif message.text[:6] == "–ó–∞–∫–∞–∑:":
        print("[Order]", message.text[7:])
        parset_data = ParserOrder(message.text[7:])

        coast_in_rub = CB.GetCoast(parset_data["price_in_yuan"])

        order_id = bd.NewOrder(message.chat.id, parset_data, coast_in_rub)

        bot.send_message(message.chat.id, f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–π —Å–æ–∑–¥–∞–Ω!\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {order_id}", reply_markup=MainMenu(message))
    elif message.text[:5] == "–¶–µ–Ω–∞:":
        coast_in_rub = CB.GetCoast(float(message.text[6:]))
        bot.send_message(message.chat.id, f"–¶–µ–Ω–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {coast_in_rub}‚ÇΩ", reply_markup=MainMenu(message))

    else:
        user_input = message.text.split(", ")
        
        if len(user_input) == 3:
            name, clothing_size, shoe_size = user_input
            # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–º–µ—Ä –æ–±—É–≤–∏ ‚Äî —á–∏—Å–ª–æ)
            try:
                shoe_size = int(shoe_size)
                # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –∏–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if bd.NewUserNFT(message.chat.id, f"@{message.chat.username}", name, clothing_size, shoe_size):

                    bot.send_message(message.chat.id,
                                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: –ò–º—è: {name}, –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {clothing_size}, –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏: {shoe_size}", reply_markup=MainMenu(message))
                else:
                    bot.send_message(message.chat.id,
                                    f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: –ò–º—è: {name}, –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {clothing_size}, –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏: {shoe_size}", reply_markup=MainMenu(message))
                

            except ValueError:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", reply_markup=MarkupBackMenu())


@bot.callback_query_handler(func = lambda call : True)
def Chek(call):
    # message = call.message

    global callback_capcha
    capcha_id = bd.GetCapcha(call.message.chat.id)
    print("[Get Capcha]", capcha_id, callback_capcha[capcha_id], "\n")

    if call.data == callback_capcha[capcha_id]:
        acsess = bd.GetAcsess(call.message.chat.id)

        if not acsess:      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

            markup = types.InlineKeyboardMarkup()
            login = types.InlineKeyboardButton("üíª –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="login")
            markup.add(login)

            # print(call.message.chat.id)

            bot.send_photo(call.message.chat.id,
                           photo=open("images/menu.jpg", "rb"),
                           caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –î–ª—è —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏—Ç–µ: –ò–º—è, –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã, –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏. "
                                    "–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –ø–æ–¥–±–æ—Ä–µ –æ–¥–µ–∂–¥—ã. \n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω, XXL, 45",
                           reply_markup=markup)

        else:
            bot.send_photo(call.message.chat.id,
                           photo=open("images/menu.jpg", "rb"), #"/images/menu.jpg",
                           caption="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                           reply_markup=MainMenu(call.message))
            

    elif call.data == "get_order":          # –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–º–∏  
        BuyOrder(call.message)
            
    elif call.data == "change_data":        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        name, clothing_size, shoe_size = bd.GetDataUser(call.message.chat.id)       
        print("[Change Data]", name, " ", clothing_size, " ", shoe_size)

        text = f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: –ò–º—è: {name}, –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {clothing_size}, –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏: {shoe_size}\n –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?"

        bot.send_photo(call.message.chat.id,
                           photo=open("images/mydata.jpg", "rb"), #"/images/menu.jpg",
                           caption=text,
                           reply_markup=ChangeData(call.message))


    elif call.data == "edit_data":          # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        handle_login(call)

    elif call.data == "back_menu":          # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        
        bot.send_photo(call.message.chat.id,
                           photo=open("images/main.jpg", "rb"), #"/images/menu.jpg",
                           #caption="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                           reply_markup=MainMenu(call.message))

    elif call.data == "order":         # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        text=(
                            "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                            "*–ó–∞–∫–∞–∑:* `'—Ç–∏–ø –æ–¥–µ–∂–¥—ã', '—Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã', '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ ¬•', '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'`\n\n"
                            "*–ü—Ä–∏–º–µ—Ä:*\n"
                            "`–ó–∞–∫–∞–∑: –∫—Ä–æ—Å—Å–æ–≤–∫–∏, XL, 596.1, https://dw4.co/t/A/1r6VSvROn`"
                        )
        bot.send_photo(call.message.chat.id,
                           photo=open("images/order.jpg", "rb"), #"/images/menu.jpg",
                           caption=text,
                           parse_mode="Markdown")

    elif call.data == "chek_coast":
        text=(
                "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –Æ–∞–Ω—è—Ö:\n\n"
                "*–ü—Ä–∏–º–µ—Ä:*\n"
                "`–¶–µ–Ω–∞: 596.1`"
            )
        bot.send_photo(call.message.chat.id,
                           photo=open("images/price.jpg", "rb"), #"/images/menu.jpg",
                           caption=text,
                           parse_mode="Markdown")


    # elif call.data ==         
    else:
        bot.send_message(call.message.chat.id, 
                            text="–¢–∞–∫–æ–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

@bot.message_handler(commands=['start'])
def start_handler(message):
    ChekUser(message)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling(timeout=30, long_polling_timeout = 10)

